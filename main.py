from PyQt5 import QtWidgets, QtGui, QtCore
import sys
import os
import json
import tempfile
import mysql.connector
from config_loader import load_settings, load_db_config

from preview_engine import generate_preview_pdf, convert_pdf_to_image
from label_engine import generate_labels_entry
from db_dialog import DBConfigDialog
from label_settings import LabelSettingsDialog

class LabelMakerApp(QtWidgets.QMainWindow):
    """Main application window for the label maker GUI."""

    def __init__(self):
        super().__init__()
        self.setWindowTitle("Label Maker")
        self.setGeometry(100, 100, 1000, 600)

        # Load application configuration with error handling
        # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ë–î –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –æ—à–∏–±–∫–æ–π,
        # –ø–æ—ç—Ç–æ–º—É –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—ã–∑–æ–≤—ã –≤ try/except –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å –æ—à–∏–±–∫–æ–π.
        try:
            self.settings = load_settings()
        except FileNotFoundError as exc:
            QtWidgets.QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞",
                f"–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫:\n{exc}"
            )
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É —Å –ø—É—Å—Ç—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            self.settings = {}

        # –§–ª–∞–≥, —É—Å–ø–µ—à–Ω–æ –ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–î
        db_loaded = True
        try:
            self.db_config = load_db_config()
        except FileNotFoundError as exc:
            QtWidgets.QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞",
                f"–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ë–î:\n{exc}"
            )
            self.db_config = {}
            db_loaded = False
        except mysql.connector.Error as exc:
            QtWidgets.QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞",
                f"–û—à–∏–±–∫–∞ MySQL –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:\n{exc}"
            )
            self.db_config = {}
            db_loaded = False

        # UI
        main_layout = QtWidgets.QHBoxLayout()
        left_layout = QtWidgets.QVBoxLayout()
        right_layout = QtWidgets.QVBoxLayout()

        self.sku_list = QtWidgets.QListWidget()
        self.sku_list.itemClicked.connect(self.preview_selected_sku)
        left_layout.addWidget(QtWidgets.QLabel("üì¶ –ê—Ä—Ç–∏–∫—É–ª—ã"))
        left_layout.addWidget(self.sku_list)
        
        self.db_status_label = QtWidgets.QLabel()
        left_layout.addWidget(self.db_status_label)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞
        if db_loaded:
            self.update_db_status()

        self.load_button = QtWidgets.QPushButton("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å SKU")
        self.load_button.clicked.connect(self.load_sku_file)
        left_layout.addWidget(self.load_button)

        self.db_settings_btn = QtWidgets.QPushButton("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î")
        self.db_settings_btn.clicked.connect(self.show_db_config_dialog)
        left_layout.addWidget(self.db_settings_btn)

        self.label_settings_btn = QtWidgets.QPushButton("üè∑Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç—Ç–∏–∫–µ—Ç–∫–∏")
        self.label_settings_btn.clicked.connect(self.show_label_settings_dialog)
        left_layout.addWidget(self.label_settings_btn)

        self.generate_button = QtWidgets.QPushButton("üì§ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å PDF")
        self.generate_button.clicked.connect(self.generate_pdf)
        left_layout.addWidget(self.generate_button)

        self.preview_mode = QtWidgets.QComboBox()
        self.preview_mode.addItems(["üëÅ –û–¥–Ω–∞ —ç—Ç–∏–∫–µ—Ç–∫–∞", "üóíÔ∏è –ü–æ–ª–Ω—ã–π –ª–∏—Å—Ç"])
        self.preview_mode.currentIndexChanged.connect(self.update_preview)
        left_layout.addWidget(self.preview_mode)

        self.log_output = QtWidgets.QTextEdit()
        self.log_output.setReadOnly(True)
        left_layout.addWidget(QtWidgets.QLabel("üìù –õ–æ–≥"))
        left_layout.addWidget(self.log_output)

        self.image_label = QtWidgets.QLabel("–ü—Ä–µ–≤—å—é")
        self.image_label.setAlignment(QtCore.Qt.AlignCenter)
        self.image_label.setStyleSheet("background-color: #f0f0f0; border: 1px solid #ccc;")
        right_layout.addWidget(self.image_label)

        main_widget = QtWidgets.QWidget()
        main_layout.addLayout(left_layout, 3)
        main_layout.addLayout(right_layout, 5)
        main_widget.setLayout(main_layout)
        self.setCentralWidget(main_widget)

    def load_sku_file(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ SKU –∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫.

        Parameters
        ----------
        self : LabelMakerApp
            –≠–∫–∑–µ–º–ø–ª—è—Ä –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞.

        Side effects
        ------------
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞, –∑–∞–ø–æ–ª–Ω—è–µ—Ç ``sku_list`` –∏
        –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ ``log_output``.
        """
        filepath, _ = QtWidgets.QFileDialog.getOpenFileName(self, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª SKU", "", "Text Files (*.txt)")
        if filepath:
            with open(filepath, "r", encoding="utf-8") as f:
                skus = [line.strip() for line in f if line.strip()]
                self.sku_list.clear()
                self.sku_list.addItems(skus)
            self.log_output.append(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ SKU: {len(skus)}")

    def preview_selected_sku(self):
        """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –ø—Ä–µ–≤—å—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ SKU –≤ —Ç–µ–∫—É—â–µ–º —Ä–µ–∂–∏–º–µ.

        Parameters
        ----------
        self : LabelMakerApp

        Side effects
        ------------
        –í—ã–∑—ã–≤–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–¥–Ω–æ–π —ç—Ç–∏–∫–µ—Ç–∫–∏ –∏–ª–∏ —Ü–µ–ª–æ–≥–æ –ª–∏—Å—Ç–∞ –∏ –ø–∏—à–µ—Ç
        —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ``log_output``.
        """
        sku = self.sku_list.currentItem().text()
        mode = self.preview_mode.currentIndex()
        if mode == 0:
            self.log_output.append(f"üëÅ –ü—Ä–µ–≤—å—é –æ–¥–Ω–æ–π —ç—Ç–∏–∫–µ—Ç–∫–∏: {sku}")
            self.show_label_preview(sku)
        else:
            self.log_output.append(f"üìÑ –ü—Ä–µ–≤—å—é —Ü–µ–ª–æ–≥–æ –ª–∏—Å—Ç–∞: {sku}")
            self.show_page_preview(sku)

    def update_preview(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–µ–≤—å—é –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ SKU –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞.

        Side effects
        ------------
        –ü—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤—ã–∑—ã–≤–∞–µ—Ç ``preview_selected_sku``.
        """
        if self.sku_list.currentItem():
            self.preview_selected_sku()

    def show_label_preview(self, sku):
        """Preview a single label for ``sku``."""
        try:
            with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp_pdf:
                pdf_path = tmp_pdf.name

            generate_preview_pdf(pdf_path, sku, self.settings, self.db_config, generate_labels_entry)
            image = convert_pdf_to_image(pdf_path)
            if image:
                image_qt = QtGui.QImage(image.tobytes("raw", "RGB"), image.width, image.height, QtGui.QImage.Format_RGB888)
                pixmap = QtGui.QPixmap.fromImage(image_qt)
                self.image_label.setPixmap(pixmap.scaled(self.image_label.size(), QtCore.Qt.KeepAspectRatio))
        except Exception as e:
            self.log_output.append(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–≤—å—é: {e}")

    def show_page_preview(self, sku):
        """Preview a full page filled with the same SKU."""
        try:
            with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp_pdf:
                pdf_path = tmp_pdf.name

            count = self.settings.get("labels_per_page", 3)
            generate_preview_pdf(pdf_path, [sku] * count, self.settings, self.db_config, generate_labels_entry)
            image = convert_pdf_to_image(pdf_path)
            if image:
                image_qt = QtGui.QImage(image.tobytes("raw", "RGB"), image.width, image.height, QtGui.QImage.Format_RGB888)
                pixmap = QtGui.QPixmap.fromImage(image_qt)
                self.image_label.setPixmap(pixmap.scaled(self.image_label.size(), QtCore.Qt.KeepAspectRatio))
        except Exception as e:
            self.log_output.append(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–≤—å—é: {e}")

    def generate_pdf(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π PDF –ø–æ –≤—Å–µ–º SKU –∏–∑ —Å–ø–∏—Å–∫–∞.

        Parameters
        ----------
        self : LabelMakerApp

        Side effects
        ------------
        –°–æ–∑–¥–∞—ë—Ç —Ñ–∞–π–ª PDF, –≤—ã–≤–æ–¥–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –Ω–∞ Windows –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç
        —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª.
        """
        skus = [self.sku_list.item(i).text() for i in range(self.sku_list.count())]
        if not skus:
            QtWidgets.QMessageBox.warning(self, "–í–Ω–∏–º–∞–Ω–∏–µ", "–°–ø–∏—Å–æ–∫ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –ø—É—Å—Ç.")
            return

        try:
            generate_labels_entry(skus, self.settings, self.db_config)
            self.log_output.append(f"‚úÖ PDF —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {self.settings['output_file']}")
            QtWidgets.QMessageBox.information(self, "–ì–æ—Ç–æ–≤–æ", f"PDF —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:\n{self.settings['output_file']}")

            if sys.platform == "win32":
                os.startfile(self.settings['output_file'])

        except Exception as e:
            self.log_output.append(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            QtWidgets.QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å PDF:\n{str(e)}")

    def show_db_config_dialog(self):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ë–î –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

        Parameters
        ----------
        self : LabelMakerApp

        Side effects
        ------------
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–∞–π–ª, –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏
        –ø–∏—à–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ``log_output``.
        """
        dialog = DBConfigDialog(self, self.db_config)
        if dialog.exec_() == QtWidgets.QDialog.Accepted:
            self.db_config = dialog.get_config()
            with open("db_config.json", "w", encoding="utf-8") as f:
                json.dump(self.db_config, f, indent=2)
            self.log_output.append("üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            self.update_db_status()

    def show_label_settings_dialog(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —ç—Ç–∏–∫–µ—Ç–∫–∏ –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è.

        Parameters
        ----------
        self : LabelMakerApp

        Side effects
        ------------
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ñ–∞–π–ª –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥.
        """
        dialog = LabelSettingsDialog(self, self.settings)
        if dialog.exec_() == QtWidgets.QDialog.Accepted:
            self.settings = dialog.get_settings()
            with open("settings.json", "w", encoding="utf-8") as f:
                json.dump(self.settings, f, indent=2, ensure_ascii=False)
            self.log_output.append("üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç—Ç–∏–∫–µ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

    def update_db_status(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ.

        Parameters
        ----------
        self : LabelMakerApp

        Side effects
        ------------
        –ò–∑–º–µ–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç –∏ —Ü–≤–µ—Ç –º–µ—Ç–∫–∏ ``db_status_label`` –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.
        """
        try:
            import mysql.connector
            conn = mysql.connector.connect(**self.db_config)
            conn.close()
            self.db_status_label.setText("üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –ë–î")
            self.db_status_label.setStyleSheet("color: green;")
        except Exception as e:
            self.db_status_label.setText("üî¥ –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
            self.db_status_label.setStyleSheet("color: red;")


def run_gui():
    """Entry point to launch the graphical interface."""
    app = QtWidgets.QApplication(sys.argv)
    window = LabelMakerApp()
    window.show()
    sys.exit(app.exec_())

if __name__ == "__main__":
    run_gui()
